/**
 * try-catch 
 * ? 예외를 처리한다 ?
 * 프론트엔드 (클라이언트)
 * 사용자의 입력을 받는다.
 * 
 * 개발자 혹은 프로그래머가 모든 에러를 예측하여 처리하기가 어렵고 거의 불가능하다.
*/

function handleSubmit() {
    // 중요하지 않다고 생각하는 핸들링 코드 <= 내 생각과 오류 발생을 초래할 수 있음 
    try {
       //  예외가 예상되는 코드 혹은 발생시킬 코드 
    } catch (error) {
       // 예외를 처리하는 코드

       /**
        * 1. 개발자를 위한 예외처리 
        * 2. 사용자를 위한 예외처리
        * 3. 사용자에게 사용을 제안
        * 4. 에러 로그
        */

       /**
        * 1. 개발자를 위한 예외처리 => 동료 개발자에게 제안을 ~~ TDZ or 나를 위해
        */
       console.warn(error);
       console.error(error);

       /**
        * 2. 사용자를 위한 예외처리 => ( 사용자가 볼 수 있다고 생각 )
        */
       alert(error) // < = 이렇게 하면 안됨 
       alert('404', 'not found') // < = 이렇게 하면 안됨 
       alert('잠시만 기다려주세요. 어떤 문제가 있습니다. 다시 시도해주세요') // 좋은 예시

       /**
        * 3. 사용자에게 사용을 제안
        */
        history.back(); 
        history.go('안전한 어딘가');
        clear();
        element.focus() // 어딘가로 이동을 시켜서 다시 한번 사용자에게 알려주기

        /**
         * 4. 에러 로그 수집 
         */
        sentry.전송() // 에러 발생시 수집해주는 기능 

        // 5. 비추천하지만 필요에 따라 다시 호출하는 경우 
        재귀호출()

    } finally {
        // 데이터 분석을 위한 로그 
    }
}

// ⭐️ try-catch를 사용할 때는 모든 구문을 try에 넣자 ⭐️
